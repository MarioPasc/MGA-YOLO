# MGA-YOLO default configuration

# Available options for export:
#  Env MGA_MASK_METHOD controls algorithm:
#    - 'nearest'  : super fast but low quality (for CI/smoke)
#    - 'area'     : fast high-quality (INTER_AREA + >0 + optional close)
#    - 'maxpool'  : block-wise max pooling
#    - 'pyrdown'  : repeated pyrDown (power-of-two strides)
#    - otherwise  : use connectivity-preserving utility (skeleton_bresenham) *Really Slow*
#  Env MGA_MASK_BRIDGE=0 disables 3x3 closing bridge (default on)
#  Env MGA_MASK_THRESH sets threshold for 'area' method (default 0.0, i.e., >0)
#  Env MGA_SAVE_AUG_MASKS=/home/mpascual/research/code/MGA-YOLO/tests Save a batch of masks/images to check augmentation
#  Env MGA_SAVE_MAX=50 Max saving per training for debugging pourposes
#  Env MGA_SAVE_FEATURE_MAPS=/path/to/dir Save intermediate feature maps as .pt files (disabled if empty)
#  Env MGA_SAVE_LAYERS="23,25,27" or "[24,26,28]" Comma-separated or JSON list of layer indices to save

task: mga 
mode: train 
model: configs/models/yolov8s_eca.yaml
data: configs/data/mga_data.yaml 
epochs: 100
name: "Kendall_UFL_MaskedECA_YOLOv8s"
project: "/home/mpascual/research/results/mga/MGA_YOLO" 

# Mask-Related Hyperparameters
MGA_MASK_METHOD: area
MGA_MASK_BRIDGE: 0
MGA_MASK_THRESH: 0.0
MGA_SAVE_FM: True
MGA_SAVE_LAYERS: "15,18,21" # These are the pre-attention feature maps
MGA_SAVE_FM_MAX: 4 # This means that we are going to save FM and Preds 4 times during training, that is, when the network is 25%, 50%, 75%, and 100% trained

# Hyperparameters ------------------------------------------------------------------------------------------------------

## General Hyperparameters ##
lr0: 0.01 # (float) initial learning rate (i.e. SGD=1E-2, Adam=1E-3)
lrf: 0.01 # (float) final learning rate (lr0 * lrf)
momentum: 0.937 # (float) SGD momentum/Adam beta1
weight_decay: 0.0005 # (float) optimizer weight decay 5e-4
warmup_epochs: 3.0 # (float) warmup epochs (fractions ok)
warmup_momentum: 0.8 # (float) warmup initial momentum
warmup_bias_lr: 0.1 # (float) warmup initial bias lr
optimizer: auto # (str) optimizer to use, choices=[SGD, Adam, Adamax, AdamW, NAdam, RAdam, RMSProp, auto]

nbs: 64 # (int) nominal batch size

box: 7.5 # (float) box loss gain
cls: 0.5 # (float) cls loss gain (scale with pixels)
dfl: 1.5 # (float) dfl loss gain
bce_weight: 1.0 # (float) Weight of Binary Cross-Entropy loss on segmentation loss
dice_weight: 1.0 # (float) Weight of Dice loss on segmentation loss
loss_lambda: 1.0 # Loss lambda for segmentation loss when combined with detection loss

## Segmentation head-related hyperparameters ##
enabled: True # Enable segmentation heads
scale_weights: [1.0, 1.0, 1.0] # Scale weights for segmentation loss
smooth: 1.0 # Smoothing factor for segmentation
# Unified Focal Loss toggles
use_unified_focal: True
ufl_lambda: 0.5   # λ in LsUF
ufl_delta: 0.6    # δ balance
ufl_gamma: 0.5    # γ focus

## Enabled augmentation hyperparameters ##
translate: 0.2 # (float) image translation (+/- fraction)
scale: 0.2 # (float) image scale (+/- gain)
fliplr: 0.2 # (float) image flip left-right (probability)

## Disabled augmentation hyperparameters ##
degrees: 0 # (float) image rotation (+/- deg)
shear: 0.0 # (float) image shear (+/- deg)
perspective: 0.0 # (float) image perspective (+/- fraction), range 0-0.001
flipud: 0.0 # (float) image flip up-down (probability)
hsv_h: 0.0 # (float) image HSV-Hue augmentation (fraction)
hsv_s: 0.0 # (float) image HSV-Saturation augmentation (fraction)
hsv_v: 0.0 # (float) image HSV-Value augmentation (fraction)
bgr: 0.0 # (float) image channel BGR (probability)
mosaic: 0.0 # (float) image mosaic (probability)
mixup: 0.0 # (float) image mixup (probability)
cutmix: 0.0 # (float) image cutmix (probability)
copy_paste: 0.0 # (float) segment copy-paste (probability)
copy_paste_mode: "flip" # (str) the method to do copy_paste augmentation (flip, mixup)
auto_augment: randaugment # (str) auto augmentation policy for classification (randaugment, autoaugment, augmix)
erasing: 0.0 # (float) probability of random erasing during classification training (0-0.9), 0 means no erasing, must be less than 1.0.
pose: 0.0 # (float) pose loss gain
kobj: 0.0 # (float) keypoint obj loss gain

# Train settings -------------------------------------------------------------------------------------------------------
time: # (float, optional) number of hours to train for, overrides epochs if supplied
patience: 100 # (int) epochs to wait for no observable improvement for early stopping of training
batch: 4 # (int) number of images per batch (-1 for AutoBatch)
imgsz: 512 # (int | list) input images size as int for train and val modes, or list[h,w] for predict and export modes
save: True # (bool) save train checkpoints and predict results
save_period: -1 # (int) Save checkpoint every x epochs (disabled if < 1)
cache: False # (bool) True/ram, disk or False. Use cache for data loading
device: 0 # (int | str | list) device: CUDA device=0 or [0,1,2,3] or "cpu/mps" or -1 or [-1,-1] to auto-select idle GPUs
workers: 0 # (int) number of worker threads for data loading (per RANK if DDP)
exist_ok: False # (bool) whether to overwrite existing experiment
pretrained: True # (bool | str) whether to use a pretrained model (bool) or a model to load weights from (str)
verbose: True # (bool) whether to print verbose output
seed: 0 # (int) random seed for reproducibility
deterministic: True # (bool) whether to enable deterministic mode
single_cls: False # (bool) train multi-class data as single-class
rect: False # (bool) rectangular training if mode='train' or rectangular validation if mode='val'
cos_lr: False # (bool) use cosine learning rate scheduler
close_mosaic: 10 # (int) disable mosaic augmentation for final epochs (0 to disable)
resume: False # (bool) resume training from last checkpoint
amp: True # (bool) Automatic Mixed Precision (AMP) training, choices=[True, False], True runs AMP check
fraction: 1.0 # (float) dataset fraction to train on (default is 1.0, all images in train set)
profile: False # (bool) profile ONNX and TensorRT speeds during training for loggers
freeze: # (int | list, optional) freeze first n layers, or freeze list of layer indices during training
multi_scale: False # (bool) Whether to use multiscale during training
# Segmentation
overlap_mask: True # (bool) merge object masks into a single image mask during training (segment train only)
mask_ratio: 4 # (int) mask downsample ratio (segment train only)
# Classification
dropout: 0.0 # (float) use dropout regularization (classify train only)

# Val/Test settings ----------------------------------------------------------------------------------------------------
val: True # (bool) validate/test during training
split: val # (str) dataset split to use for validation, i.e. 'val', 'test' or 'train'
save_json: False # (bool) save results to JSON file

conf: 0.25 # (float, optional) object confidence threshold for detection (default 0.25 predict, 0.001 val)
iou: 0.5 # (float) intersection over union (IoU) threshold for NMS
max_det: 100 # (int) maximum number of detections per image

half: False # (bool) use half precision (FP16)
dnn: False # (bool) use OpenCV DNN for ONNX inference
plots: True # (bool) save plots and images during train/val

# Predict settings -----------------------------------------------------------------------------------------------------
source: # (str, optional) source directory for images or videos
vid_stride: 1 # (int) video frame-rate stride
stream_buffer: False # (bool) buffer all streaming frames (True) or return the most recent frame (False)
visualize: False # (bool) visualize model features (predict) or visualize TP, FP, FN (val)
augment: False # (bool) apply image augmentation to prediction sources
agnostic_nms: False # (bool) class-agnostic NMS
classes: # (int | list[int], optional) filter results by class, i.e. classes=0, or classes=[0,2,3]
retina_masks: False # (bool) use high-resolution segmentation masks
embed: # (list[int], optional) return feature vectors/embeddings from given layers

# Visualize settings ---------------------------------------------------------------------------------------------------
show: False # (bool) show predicted images and videos if environment allows
save_frames: False # (bool) save predicted individual video frames
save_txt: False # (bool) save results as .txt file
save_conf: False # (bool) save results with confidence scores
save_crop: False # (bool) save cropped images with results
show_labels: True # (bool) show prediction labels, i.e. 'person'
show_conf: True # (bool) show prediction confidence, i.e. '0.99'
show_boxes: True # (bool) show prediction boxes
line_width: # (int, optional) line width of the bounding boxes. Scaled to image size if None.

# Export settings ------------------------------------------------------------------------------------------------------
format: torchscript # (str) format to export to, choices at https://docs.ultralytics.com/modes/export/#export-formats
keras: False # (bool) use Kera=s
optimize: False # (bool) TorchScript: optimize for mobile
int8: False # (bool) CoreML/TF INT8 quantization
dynamic: False # (bool) ONNX/TF/TensorRT: dynamic axes
simplify: True # (bool) ONNX: simplify model using `onnxslim`
opset: # (int, optional) ONNX: opset version
workspace: # (float, optional) TensorRT: workspace size (GiB), `None` will let TensorRT auto-allocate memory
nms: False # (bool) CoreML: add NMS

# Custom config.yaml ---------------------------------------------------------------------------------------------------
cfg: # (str, optional) for overriding defaults.yaml

# Tracker settings ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml # (str) tracker type, choices=[botsort.yaml, bytetrack.yaml]
